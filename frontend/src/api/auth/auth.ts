/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type { LoginRequest, TokenResponse, UserCreate, UserResponse } from '../fastAPI.schemas';

import { customInstance } from '../../utils/customAxios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAuth = () => {
  /**
   * @summary Register User
   */
  const registerUserApiAuthRegisterPost = (
    userCreate: UserCreate,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<UserResponse>(
      {
        url: `/api/auth/register`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: userCreate
      },
      options
    );
  };
  /**
   * @summary Login
   */
  const loginApiAuthLoginPost = (
    loginRequest: LoginRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<TokenResponse>(
      {
        url: `/api/auth/login`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: loginRequest
      },
      options
    );
  };
  return { registerUserApiAuthRegisterPost, loginApiAuthLoginPost };
};
export type RegisterUserApiAuthRegisterPostResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>['registerUserApiAuthRegisterPost']>>
>;
export type LoginApiAuthLoginPostResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>['loginApiAuthLoginPost']>>
>;
